resource_types:

- name: sonar-runner
  type: docker-image
  source:
    repository: cathive/concourse-sonarqube-resource
    tag: latest # For reproducible builds use a specific tag and don't rely on "latest".
    
resources:
  - name: spring-boot-service
    type: git
    source:
      uri: https://github.com/gguptahcl/springboot-concourse-ci.git
      branch: master

  - name: code-analysis
    type: sonar-runner
    source:
      host_url: http://192.168.0.23:9000/
      login: ((sonarqube-login))
      password:  ((sonarqube-pwd))




jobs:
  - name: test
    public: true
    plan:
      - get: spring-boot-service
        trigger: true
      - task: mvn-test
        file: "spring-boot-service/concourse_ci/tasks/maven-test.yml"

  
  - name: build-and-analyze
    plan:
      - get: spring-boot-service
        trigger: true
      - task: build
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: maven
              tag: 3.6.0-jdk-8-alpine
          inputs:
          - name: spring-boot-service
          outputs:
          # Hint: The sonar-runner needs more than just the
          # sources to perform a full analysis. Line coverage reports, unit test reports,
          # Java class files and mutation test results should also be present.
          # Therefore, you'll have to make sure that your build script provides the sources
          # and the compilation/test results in your Concourse CI build plan.
          # (And that is the reason, why we need the following output)
          - name: sonarqube-analysis-input
          run:
            path: "mvn"
            args:
              - -f
              - spring-boot-service/pom.xml
              - clean
              - test            
      - in_parallel:
        - put: code-analysis
          params:
            project_path: sonarqube-analysis-input
            project_key: com.example.gg
            sources: ["."]
            tests: ["."]
            additional_properties:
              # Will be passed as "-Dsonar.javascript.lcov.reportPaths="coverage/lcov.info" to the scanner.
              sonar.javascript.lcov.reportPaths: coverage/lcov.info
          get_params:
            quality_gate:
              ignore_errors: ['new_coverage', 'violations']
              ignore_warns: ['new_duplicated_lines_density', 'violations']


  - name: sonar-scan
    public: true
    plan:
    - get: spring-boot-service
      passed:
        - test
      trigger: true
    - task: code-scan
      file: spring-boot-service/concourse_ci/tasks/sonarscan.yml